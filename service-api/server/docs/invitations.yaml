paths:
  /invitations/send:                # path of the user from your endpoint
    post:                 # endpoint request type (post request)
      tags:               # Tag property
        - Invitations            # Value of the tag
      summary: creates and sends an Invitation
      security:
        - bearerAuth: []   # Use OAuth with a different scope
        - code: []      
      produces:
      - application/json
      parameters:
      - in: body          # request body
        name:     # name of request, can be any name
        description: creates and sends an Invitation
        required: false   # can also be true depending on user preference
        schema:           # Schema definition
          $ref: '#/definitions/invitations' 
      responses:          # server responses
        200:
          description: An object with Invitation details
  /invitations/accept{id}:                # path of the user from your endpoint
    put:                 # endpoint request type (post request)
      tags:               # Tag property
        - Invitations            # Value of the tag
      summary: accepts an Invitation
      security:
        - bearerAuth: []   # Use OAuth with a different scope
        - code: []      
      produces:
      - application/json
      parameters:
      - in: path          # request body
        name: id   # name of request, can be any name
        schema:
          type: string
          format: uuid
        description: Accepts an invitation based on the id provided
        required: true   # can also be true depending on user preference
      responses:          # server responses
        200:
          description: An object accepted  Invite Detail
  /invitations/resend{id}:                # path of the user from your endpoint
    put:                 # endpoint request type (post request)
      tags:               # Tag property
        - Invitations            # Value of the tag
      summary: resends an invitation
      security:
        - bearerAuth: []   # Use OAuth with a different scope
        - code: []      
      produces:
      - application/json
      parameters:
      - in: path          # request body
        name: id   # name of request, can be any name
        schema:
          type: string
          format: uuid
        description: Resends an invitation based on the id provided
        required: true   # can also be true depending on user preference
      responses:          # server responses
        200:
          description: An object with Invite Details
  /invitations/expire{id}:                # path of the user from your endpoint
    put:                 # endpoint request type (post request)
      tags:               # Tag property
        - Invitations            # Value of the tag
      summary: expires an invitation
      security:
        - bearerAuth: []   # Use OAuth with a different scope
        - code: []      
      produces:
      - application/json
      parameters:
      - in: path          # request body
        name: id   # name of request, can be any name
        schema:
          type: string
          format: uuid
        description: Expires an invitation based on the id provided
        required: true   # can also be true depending on user preference
      responses:          # server responses
        200:
          description: An object with Invite Details
  /invitations/:                # path of the user from your endpoint
    get:                 # endpoint request type (post request)
      tags:               # Tag property
        - Invitations            # Value of the tag
      summary: lists all invitations
      security:
        - bearerAuth: []   # Use OAuth with a different scope
        - code: []      
      produces:
      - application/json
      parameters:
      - in: body          # request body
        name:     # name of request, can be any name
        description: Lists all invitations based on the company code
        required: false   # can also be true depending on user preference
      responses:          # server responses
        200:
          description: An object with Invite Details 
  /invitations/{id}:
    delete:
      tags:               # Tag property
        - Invitations            # Value of the tag
      summary: deletes an Invitation
      produces:
      - application/json
      security:
        - bearerAuth: []   # Use OAuth with a different scope
        - code: []            
      parameters:
      - in: path          # request body
        name: id   # name of request, can be any name
        schema:
          type: string
          format: uuid
        description: Expires an invitation based on the id provided
        required: true   # can also be true depending on user preference
      responses:          # server responses
        200:
          description: An object
  /invitations/edit_permissions/{id}:
    put:
      tags:               # Tag property
        - Invitations            # Value of the tag
      summary: edits an Invitation permission
      produces:
      - application/json
      security:
        - bearerAuth: []   # Use OAuth with a different scope
        - code: []            
      parameters:
      - in: path          # request body
        name: id   # name of request, can be any name
        schema:
          type: string
          format: uuid
        description: Edits an invitation inital permission based on the id provided
        required: true   # can also be true depending on user preference
      responses:          # server responses
        200:
          description: An object          
definitions:        # Schema defination for request body
  invitations:
    type: object
    properties:
      email:
        type: string
      permissions:
        $ref: '#/definitions/permissions'
  permissions:
    type: object
    properties:
      site_permissions:
        type: array
        example: [""]
      core_permissions:
        type: object
        $ref: '#/definitions/core_permission'
  core_permission:
    type: object
    properties:
    devices:
      type:array
      example["read","update"]